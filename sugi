body {
    margin: 0;
    overflow: hidden;
}
canvas {
    display: block;
}

// And Arden created the world!
// https://threejs.org/docs/#api/scenes/Scene
const scene = new THREE.Scene();

// Let us set a camera and camera position
// https://threejs.org/docs/#api/cameras/PerspectiveCamera
const camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0.1, 50 );
camera.position.z = 30;

// Create a WebGL renderer 
// https://threejs.org/docs/#api/renderers/WebGLRenderer
const renderer = new THREE.WebGLRenderer( { antialias: true } );
renderer.setPixelRatio( window.devicePixelRatio );
renderer.setSize( window.innerWidth, window.innerHeight );
renderer.setClearColor( 0x000000, 1 );
document.body.appendChild( renderer.domElement );

// Add Orbit controls: 
// https://github.com/mrdoob/three.js/blob/dev/examples/js/controls/OrbitControls.js
const orbit = new THREE.OrbitControls( camera, renderer.domElement );
orbit.enableZoom = false;

// And there was light: https://threejs.org/docs/#api/lights/PointLight
function setLights() {
    const lights = [];
    lights[ 0 ] = new THREE.PointLight( 0xffffff, 0.5, 0 );
    lights[ 1 ] = new THREE.PointLight( 0xffffff, 0.5, 0 );
    lights[ 2 ] = new THREE.PointLight( 0xffffff, 0.5, 0 );

    lights[ 0 ].position.set( 0, 200, 0 );
    lights[ 1 ].position.set( 100, 200, 100 );
    lights[ 2 ].position.set( - 100, - 200, - 100 );

    scene.add( lights[ 0 ] );
    scene.add( lights[ 1 ] );
    scene.add( lights[ 2 ] );
}

const sapphireTopGeo = new THREE.CylinderGeometry(10, 6, 3, 8);
const sapphireBottomGeo = new THREE.ConeGeometry(10, 14, 8);

const createSapphire = ( geometry ) => {
    const mesh = new THREE.Object3D();
    const material = new THREE.MeshPhysicalMaterial({
        color: '#0f52ba',
        transparent: true,
        opacity: 0.95,
        emissive: 0x072534,
        side: THREE.DoubleSide,
        flatShading: true,
    });
    const lines = new THREE.LineBasicMaterial({
        color: 0xffffff,
        transparent: true,
        opacity: 0.9,
    });
    // Add Wireframe to Object3D
    mesh.add( new THREE.LineSegments(
        new THREE.WireframeGeometry(geometry),
        lines,
    ));
    // Add skin/color to Object3D
    mesh.add( new THREE.Mesh(
        geometry,
        material,
    ));    
    return mesh;
}

setLights();

const sapphireTop = createSapphire(sapphireTopGeo);
const sapphireBottom = createSapphire(sapphireBottomGeo);
const fullSapphire = new THREE.Group();

sapphireTop.position.y = -8.5;
fullSapphire.rotation.x = 3.6;
fullSapphire.add(sapphireTop);
fullSapphire.add(sapphireBottom);
scene.add(fullSapphire);

const render = () => {
    requestAnimationFrame( render );
    fullSapphire.rotation.y += 0.01;
    renderer.render( scene, camera );
}

window.addEventListener( 'resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize( window.innerWidth, window.innerHeight );
}, false );

render();
